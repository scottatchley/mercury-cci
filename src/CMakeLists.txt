#------------------------------------------------------------------------------
# Include source and build directories
#------------------------------------------------------------------------------
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/proc_extra
)
include_directories(${BMI_INCLUDE_DIR})

#------------------------------------------------------------------------------
# Internal dependencies
#------------------------------------------------------------------------------
# UTIL
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/util)
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/util
  ${CMAKE_CURRENT_BINARY_DIR}/util
)
set(MERCURY_EXT_INCLUDE_DEPENDENCIES ${MERCURY_UTIL_EXT_INCLUDE_DEPENDENCIES}
  ${MERCURY_EXT_INCLUDE_DEPENDENCIES}
  )
set(MERCURY_EXPORTED_LIBS mercury_util ${MERCURY_EXPORTED_LIBS})
set(MERCURY_EXT_LIB_DEPENDENCIES  ${MERCURY_UTIL_EXT_LIB_DEPENDENCIES}
  ${MERCURY_EXT_LIB_DEPENDENCIES}
)

# NA
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/na)
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/na
  ${CMAKE_CURRENT_BINARY_DIR}/na
)
set(MERCURY_EXT_INCLUDE_DEPENDENCIES ${NA_EXT_INCLUDE_DEPENDENCIES}
  ${MERCURY_EXT_INCLUDE_DEPENDENCIES}
  )
set(MERCURY_EXPORTED_LIBS na ${MERCURY_EXPORTED_LIBS})
set(MERCURY_EXT_LIB_DEPENDENCIES ${NA_EXT_LIB_DEPENDENCIES}
  ${MERCURY_EXT_LIB_DEPENDENCIES}
)

#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------
# Boost (for preprocessor macros)
option(MERCURY_USE_BOOST_PP "Use BOOST preprocessor macros." OFF)
if(MERCURY_USE_BOOST_PP)
  find_package(Boost 1.48.0 REQUIRED REQUIRED regex)
  if(Boost_FOUND)
    message(STATUS "Boost include directory: ${Boost_INCLUDE_DIRS}")
    set(HG_HAS_BOOST 1)
    set(MERCURY_EXT_INCLUDE_DEPENDENCIES ${Boost_INCLUDE_DIRS}
      ${MERCURY_EXT_INCLUDE_DEPENDENCIES}
    )
  else()
    message(FATAL_ERROR "Could not find Boost, please check Boost_INCLUDE_DIR.")
  endif()
endif()

# MChecksum
option(MERCURY_USE_SYSTEM_MCHECKSUM "Use system-installed MChecksum." OFF)
if(MERCURY_USE_SYSTEM_MCHECKSUM)
  find_package(mchecksum REQUIRED)
  if(mchecksum_FOUND)
    message(STATUS "mchecksum include directory: ${MCHECKSUM_INCLUDE_DIR}")
    set(MERCURY_EXT_INCLUDE_DEPENDENCIES ${MCHECKSUM_INCLUDE_DIR}
      ${MERCURY_EXT_INCLUDE_DEPENDENCIES}
    )
    # Makes it easier to get full target path for mchecksum (targets and pkgconfig)
    get_target_property(mchecksum_config mchecksum IMPORTED_CONFIGURATIONS)
    get_target_property(mchecksum_lib mchecksum IMPORTED_LOCATION_${mchecksum_config})
    # Get rid of version number if any
    string(REGEX REPLACE ".([0-9]+).([0-9]+).([0-9]+)$" "" mchecksum_lib ${mchecksum_lib})
    set(MERCURY_EXT_LIB_DEPENDENCIES ${mchecksum_lib} ${MERCURY_EXT_LIB_DEPENDENCIES})
  else()
    message(FATAL_ERROR "Could not find MChecksum, please check mchecksum_INCLUDE_DIR.")
  endif()
else()
  set(MCHECKSUM_EXTERNALLY_CONFIGURED 1)
  set(MCHECKSUM_EXTERNAL_EXPORTED_TARGETS ${MERCURY_EXPORTED_TARGETS})
  add_subdirectory(mchecksum)
  include(${MCHECKSUM_BINARY_DIR}/mchecksum-config.cmake)
  message(STATUS "mchecksum include directory: ${MCHECKSUM_INCLUDE_DIR}")
  include_directories(${MCHECKSUM_INCLUDE_DIR})
  set(MERCURY_EXPORTED_LIBS mchecksum ${MERCURY_EXPORTED_LIBS})
endif()

# XDR
option(MERCURY_USE_XDR "Use XDR for generic encoding." OFF)
if(MERCURY_USE_XDR)
  set(HG_HAS_XDR 1)
endif()

include_directories(${MERCURY_EXT_INCLUDE_DEPENDENCIES})

# For htonl etc
if(WIN32)
  set(MERCURY_EXT_LIB_DEPENDENCIES ws2_32 ${MERCURY_EXT_LIB_DEPENDENCIES})
endif(WIN32)

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique vars used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(HG_BUILD_SHARED_LIBS 1)
  set(MERCURY_LIBTYPE SHARED)
else()
  set(HG_BUILD_SHARED_LIBS 0)
  set(MERCURY_LIBTYPE STATIC)
endif()

if(MERCURY_ENABLE_VERBOSE_ERROR)
  set(HG_HAS_VERBOSE_ERROR 1)
else()
  set(HG_HAS_VERBOSE_ERROR 0)
endif()

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/mercury_config.h
)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
set(MERCURY_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_handler.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_proc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_proc_header.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_bulk.c
  ${CMAKE_CURRENT_SOURCE_DIR}/proc_extra/mercury_string_object.c
  ${CMAKE_CURRENT_SOURCE_DIR}/proc_extra/mercury_proc_string.c
)

#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------
# MERCURY
add_library(mercury ${MERCURY_SRCS})
target_link_libraries(mercury ${MERCURY_EXPORTED_LIBS} ${MERCURY_EXT_LIB_DEPENDENCIES})
mercury_set_lib_options(mercury "mercury" ${MERCURY_LIBTYPE})
if(MERCURY_ENABLE_COVERAGE)
  set_coverage_flags(mercury)
endif()

set(MERCURY_EXPORTED_LIBS mercury ${MERCURY_EXPORTED_LIBS})

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(MERCURY_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_handler.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_proc.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_bulk.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_types.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_macros.h
  ${CMAKE_CURRENT_BINARY_DIR}/mercury_config.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mercury_error.h
  ${CMAKE_CURRENT_SOURCE_DIR}/proc_extra/mercury_string_object.h
  ${CMAKE_CURRENT_SOURCE_DIR}/proc_extra/mercury_proc_string.h
)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${MERCURY_HEADERS}
  DESTINATION
    ${MERCURY_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  TARGETS
    mercury
  EXPORT
    ${MERCURY_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${MERCURY_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${MERCURY_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${MERCURY_INSTALL_BIN_DIR}
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${MERCURY_EXPORTED_TARGETS}
  DESTINATION
    ${MERCURY_INSTALL_DATA_DIR}/cmake/mercury
  FILE
    ${MERCURY_EXPORTED_TARGETS}.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT MERCURY_EXTERNALLY_CONFIGURED)
EXPORT (
  TARGETS
    ${MERCURY_EXPORTED_LIBS}
  FILE
    ${MERCURY_EXPORTED_TARGETS}.cmake
)
endif()

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------
set(NA_PLUGINS ${NA_PLUGINS} PARENT_SCOPE)

# Used by config.cmake.build.in and Testing
set(MERCURY_INCLUDES_BUILD_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/na
  ${CMAKE_CURRENT_BINARY_DIR}/na
  ${CMAKE_CURRENT_SOURCE_DIR}/util
  ${CMAKE_CURRENT_BINARY_DIR}/util
  ${CMAKE_CURRENT_SOURCE_DIR}/proc_extra
  ${MERCURY_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Used by config.cmake.install.in
set(MERCURY_INCLUDES_INSTALL_TIME
  ${MERCURY_INSTALL_INCLUDE_DIR}
  ${MERCURY_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Pkg-config configuration
if(NOT WIN32 AND NOT APPLE)
  string(TOLOWER ${CMAKE_BUILD_TYPE} lower_cmake_build_type)

  foreach(exported_lib ${MERCURY_EXPORTED_LIBS})
    if(lower_cmake_build_type MATCHES "debug")
      get_target_property(MERCURY_LIBRARY ${exported_lib} DEBUG_OUTPUT_NAME)
    else()
      get_target_property(MERCURY_LIBRARY ${exported_lib} RELEASE_OUTPUT_NAME)
    endif()
    set(MERCURY_LIBRARIES "${MERCURY_LIBRARIES} -l${MERCURY_LIBRARY}")
  endforeach()
  set(MERCURY_LIBRARIES ${MERCURY_LIBRARIES} PARENT_SCOPE)

  # Need to generate -llib if not already passed
  foreach(lib_dep ${MERCURY_EXT_LIB_DEPENDENCIES})
    # get library name
    get_filename_component(lib_name ${lib_dep} NAME_WE)
    if(lib_name MATCHES "^-l")
      # lib_name found is -lxxx
      set(MERCURY_EXT_LIB_DEPENDENCIES_LIST ${MERCURY_EXT_LIB_DEPENDENCIES_LIST} ${lib_name})
    else()
      # lib_name is /path/to/lib so get library path and name
      get_filename_component(lib_path ${lib_dep} PATH)
      string(REGEX REPLACE "^lib" "" lib_name ${lib_name})
      set(MERCURY_EXT_LIB_DEPENDENCIES_LIST ${MERCURY_EXT_LIB_DEPENDENCIES_LIST} -L${lib_path} -l${lib_name})
    endif()
  endforeach()
  list(REMOVE_DUPLICATES MERCURY_EXT_LIB_DEPENDENCIES_LIST)

  foreach(lib_dep ${MERCURY_EXT_LIB_DEPENDENCIES_LIST})
    set(MERCURY_LIB_DEPENDENCIES "${MERCURY_LIB_DEPENDENCIES} ${lib_dep}")
  endforeach()
  set(MERCURY_LIB_DEPENDENCIES ${MERCURY_LIB_DEPENDENCIES} PARENT_SCOPE)

  foreach(inc_dep ${MERCURY_EXT_INCLUDE_DEPENDENCIES})
    set(MERCURY_INCLUDE_DEPENDENCIES "${MERCURY_INCLUDE_DEPENDENCIES} -I${inc_dep}")
  endforeach()
  set(MERCURY_INCLUDE_DEPENDENCIES ${MERCURY_INCLUDE_DEPENDENCIES} PARENT_SCOPE)
endif()
